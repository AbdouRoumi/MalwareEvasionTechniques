#include <windows.h>
#include <tlhelp32.h>
#include <stdio.h>
#include <stdlib.h>
#include <wchar.h>

int main(int argc, char* argv[]) {
    DWORD PID;
    WCHAR TargetName[MAX_PATH];
    BOOL found = FALSE;  // Flag to track if process was found

    if (argc < 2) {
        fprintf(stderr, "Usage: %s <Process Name>\n", argv[0]);
        return EXIT_FAILURE;
    }

    size_t convertedChars = 0;
    // Use mbstowcs_s to safely convert char* to WCHAR*
    mbstowcs_s(&convertedChars, TargetName, MAX_PATH, argv[1], _TRUNCATE);

    HANDLE hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
    if (hSnapshot == INVALID_HANDLE_VALUE) {
        return 1;
    }

    PROCESSENTRY32 Proc;
    Proc.dwSize = sizeof(PROCESSENTRY32);

    if (!Process32First(hSnapshot, &Proc)) {
        CloseHandle(hSnapshot);
        return 1;
    }

    do {
        // Compare the process name with the target name
        if (wcscmp(Proc.szExeFile, TargetName) == 0) {
            PID = Proc.th32ProcessID;
            wprintf(L"Great! We found the process: %ls with PID: %ld\n", TargetName, PID);
            found = TRUE;  // Set the flag to indicate process was found
            break;
        }
    } while (Process32Next(hSnapshot, &Proc));

    if (!found) {
        wprintf(L"Process: %ls not found.\n", TargetName);
    }

    CloseHandle(hSnapshot);
    return EXIT_SUCCESS;
}
